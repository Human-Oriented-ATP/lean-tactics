main_jumps : JumpSet
main_mines : MineField
J : Jump
jumps : JumpSet
mines0 : MineField
mines1 : MineField

---
Multiset.Nodup(main_jumps)
EQUALS(JumpSet.sum(main_jumps), HAdd.hAdd(↑(MineField.length(main_mines)), 1))
LT(MineField.countMines(main_mines), ↑(Multiset.sizeOf(main_jumps)))
NOT(EQUALS(MineField.countMines(main_mines), 0))
EQUALS(main_jumps, Multiset.cons(J, jumps))
x : Jump :: IMPLIES(Membership.mem(x, main_jumps), LE(Jump.length(x), Jump.length(J)))
EQUALS(main_mines, HAppend.hAppend(mines0, mines1))
EQUALS(↑(MineField.length(mines0)), Jump.length(J))
LT(HSub.hSub(Jump.length(J), 1), 0)
