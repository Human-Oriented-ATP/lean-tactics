main_jumps : JumpSet
main_mines : MineField
J : Jump
jumps : JumpSet
mines0 : MineField
mines1 : MineField
mines00 : MineField
mines01 : MineField
mines10 : MineField
mines11 : MineField
mines_un : MineField

---
Multiset.Nodup(main_jumps)
EQUALS(JumpSet.sum(main_jumps), HAdd.hAdd(↑(MineField.length(main_mines)), 1))
LT(MineField.countMines(main_mines), ↑(Multiset.sizeOf(main_jumps)))
NOT(EQUALS(MineField.countMines(main_mines), 0))
EQUALS(main_jumps, Multiset.cons(J, jumps))
x : Jump :: IMPLIES(Membership.mem(x, main_jumps), LE(Jump.length(x), Jump.length(J)))
EQUALS(main_mines, HAppend.hAppend(mines0, mines1))
EQUALS(↑(MineField.length(mines0)), Jump.length(J))
EQUALS(mines0, HAppend.hAppend(mines00, mines01))
EQUALS(↑(MineField.length(mines00)), HSub.hSub(Jump.length(J), 1))
LE(MineField.length(mines00), MineField.length(mines1))
EQUALS(mines1, HAppend.hAppend(mines10, mines11))
EQUALS(↑(MineField.length(mines10)), ↑(MineField.length(mines00)))
EQUALS(MineField.length(mines00), MineField.length(mines_un))
EQUALS(MineField.length(mines10), MineField.length(mines_un))
LE(MineField.countMines(mines00), MineField.countMines(mines_un))
LE(MineField.countMines(mines10), MineField.countMines(mines_un))
x : ℤ :: IMPLIES(EQUALS(List.getIndexD(mines00, x), true), EQUALS(List.getIndexD(mines_un, x), true))
x : ℤ :: IMPLIES(EQUALS(List.getIndexD(mines10, x), true), EQUALS(List.getIndexD(mines_un, x), true))
LE(MineField.countMines(mines_un), HAdd.hAdd(MineField.countMines(mines00), MineField.countMines(mines10)))
EQUALS(List.getIndexD(mines01, 0), true)
LE(Multiset.sizeOf(main_jumps), Multiset.sizeOf(jumps))
