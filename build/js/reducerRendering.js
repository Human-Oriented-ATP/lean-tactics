const global = window;

import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import * as React from 'react';
import { RpcContext, useAsyncPersistent, mapRpcError, importWidgetModule } from '@leanprover/infoview';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

/**
 * Render a HTML tree into JSX, resolving any dynamic imports corresponding to `component`s along
 * the way.
 *
 * This guarantees that the resulting React tree is exactly as written down in Lean. In particular,
 * there are no extraneous {@link DynamicComponent} nodes which works better with some libraries
 * that directly inspect the children nodes.
 */
function renderHtml(rs, pos, html) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, tag, attrsList, cs, attrs, _i, attrsList_1, _b, k, v, children, _c, hash, export_, props, cs, children, dynProps, mod;
        var _this = this;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!('text' in html)) return [3 /*break*/, 1];
                    return [2 /*return*/, jsx(Fragment, { children: html.text })];
                case 1:
                    if (!('element' in html)) return [3 /*break*/, 3];
                    _a = html.element, tag = _a[0], attrsList = _a[1], cs = _a[2];
                    attrs = {};
                    for (_i = 0, attrsList_1 = attrsList; _i < attrsList_1.length; _i++) {
                        _b = attrsList_1[_i], k = _b[0], v = _b[1];
                        attrs[k] = v;
                    }
                    return [4 /*yield*/, Promise.all(cs.map(function (html) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, renderHtml(rs, pos, html)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }))];
                case 2:
                    children = _d.sent();
                    if (tag === "hr") {
                        // React is greatly concerned by <hr/>s having children.
                        return [2 /*return*/, jsx("hr", {})];
                    }
                    else if (children.length === 0) {
                        return [2 /*return*/, React.createElement(tag, attrs)];
                    }
                    else {
                        return [2 /*return*/, React.createElement(tag, attrs, children)];
                    }
                case 3:
                    if (!('component' in html)) return [3 /*break*/, 6];
                    _c = html.component, hash = _c[0], export_ = _c[1], props = _c[2], cs = _c[3];
                    return [4 /*yield*/, Promise.all(cs.map(function (html) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, renderHtml(rs, pos, html)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }))];
                case 4:
                    children = _d.sent();
                    dynProps = __assign(__assign({}, props), { pos: pos });
                    return [4 /*yield*/, importWidgetModule(rs, pos, hash)];
                case 5:
                    mod = _d.sent();
                    if (!(export_ in mod))
                        throw new Error("Module '".concat(hash, "' does not export '").concat(export_, "'"));
                    if (children.length === 0) {
                        return [2 /*return*/, React.createElement(mod[export_], dynProps)];
                    }
                    else {
                        return [2 /*return*/, React.createElement(mod[export_], dynProps, children)];
                    }
                case 6: return [2 /*return*/, jsxs("span", __assign({ className: "red" }, { children: ["Unknown HTML variant: ", JSON.stringify(html)] }))];
                case 7: return [2 /*return*/];
            }
        });
    });
}
function HtmlDisplay(_a) {
    var pos = _a.pos, html = _a.html;
    var rs = React.useContext(RpcContext);
    var state = useAsyncPersistent(function () { return renderHtml(rs, pos, html); }, [rs, pos, html]);
    if (state.state === 'resolved')
        return state.value;
    else if (state.state === 'rejected')
        return jsxs("span", __assign({ className: "red" }, { children: ["Error rendering HTML: ", mapRpcError(state.error).message] }));
    return jsx(Fragment, {});
}

var RenderingContext = React.createContext(undefined);
function HtmlDisplayPanel(_a) {
    var pos = _a.pos, html = _a.html;
    var _b = React.useState(html), output = _b[0], setOutput = _b[1];
    return (jsx(RenderingContext.Provider, __assign({ value: setOutput }, { children: jsx("details", __assign({ open: true }, { children: jsx(HtmlDisplay, { pos: pos, html: output }) })) })));
}

export { RenderingContext, HtmlDisplayPanel as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
