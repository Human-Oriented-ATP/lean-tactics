A tactic that simplifies the syntax tree when typeclasses such as HAdd are used (this is how a + b is initially stored)
It seems this can be achieved in a straightforward way by reducing with the transparency set to instance as described on page 26 of Metaprogramming in Lean 4

Skolemization
-------------
It would probably make sense to have two Skolemization tactics.
The first, basic one works only at the root level, i.e. with expressions of the form \forall x, \exists y, P x y. It would fail if the expression is not of this form.
The second, more powerful tactic acts on the whole parse tree, and iteratively skolemizes until there are no \forall x, \exists y patterns in tree.
It seems to make sense to have a "tactic constructor" of some kind, which given a substitution will iteratively apply that substitution at any point in the parse tree where it can be applied. Perhaps something like this exists already? Once this constructor is found/created, it will be easy to implement full-strength skolemization as outlined above.

